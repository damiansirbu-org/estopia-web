name: Build and Push Web Frontend

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0, latest)'
        required: true
        default: 'latest'
        type: string
      run_tests:
        description: 'Run tests and linting'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: estopia-web

jobs:
  test:
    name: Run Tests and Linting
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_tests == 'true' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci

    - name: Run linting
      run: |
        echo "🔍 Running ESLint..."
        npm run lint

    - name: Run type checking
      run: |
        echo "🔎 Running TypeScript type checking..."
        npm run type-check

    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        npm run test:coverage
      env:
        CI: true

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: estopia-web

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || github.event.inputs.run_tests == 'false')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Install dependencies and build
      run: |
        echo "📦 Installing dependencies..."
        npm ci
        
        echo "🏗️ Building React application..."
        npm run build

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "✅ Image built and pushed successfully!"
        echo "🐳 Image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}"
        echo "📝 To deploy: Update docker-compose files with this image tag"