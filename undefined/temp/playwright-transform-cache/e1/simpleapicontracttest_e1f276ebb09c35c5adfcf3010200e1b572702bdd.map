{"version":3,"names":["describe","it","expect","beforeAll","afterEach","afterAll","http","HttpResponse","setupServer","handlers","post","request","body","json","fieldErrors","name","trim","push","field","code","message","phoneNumber","nationalId","length","success","type","status","data","id","Date","now","server","listen","resetHandlers","close","response","fetch","method","headers","JSON","stringify","toBe","toHaveLength","fieldNames","map","err","toContain","clientData","toBeDefined"],"sources":["simple-api-contract.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterEach, afterAll } from 'vitest'\nimport { http, HttpResponse } from 'msw'\nimport { setupServer } from 'msw/node'\n\n/**\n * Simple API Contract Tests\n * \n * These tests verify that our MSW mocks match expected backend behavior\n * without requiring complex component rendering\n */\n\n// Simple MSW server setup for this test\nconst handlers = [\n  http.post('http://localhost:8080/api/clients', async ({ request }) => {\n    const body = await request.json() as any\n    \n    // Test validation logic matching backend\n    const fieldErrors = []\n    \n    if (!body.name || body.name.trim() === '') {\n      fieldErrors.push({\n        field: 'name',\n        code: 'VALIDATION_ERROR',\n        message: 'Name is required'\n      })\n    }\n    \n    if (!body.phoneNumber || body.phoneNumber.trim() === '') {\n      fieldErrors.push({\n        field: 'phoneNumber',\n        code: 'VALIDATION_ERROR', \n        message: 'Phone number is required'\n      })\n    }\n    \n    if (!body.nationalId || body.nationalId.trim() === '') {\n      fieldErrors.push({\n        field: 'nationalId',\n        code: 'VALIDATION_ERROR',\n        message: 'National ID is required'\n      })\n    }\n\n    if (fieldErrors.length > 0) {\n      return HttpResponse.json({\n        success: false,\n        type: 'VALIDATION_ERROR',\n        status: 400,\n        fieldErrors\n      }, { status: 400 })\n    }\n\n    return HttpResponse.json({\n      success: true,\n      data: {\n        id: Date.now(),\n        name: body.name,\n        phoneNumber: body.phoneNumber,\n        nationalId: body.nationalId\n      }\n    }, { status: 201 })\n  })\n]\n\nconst server = setupServer(...handlers)\n\ndescribe('Simple API Contract Tests', () => {\n  beforeAll(() => server.listen())\n  afterEach(() => server.resetHandlers())\n  afterAll(() => server.close())\n\n  it('should validate client creation with all 3 field errors', async () => {\n    const response = await fetch('http://localhost:8080/api/clients', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: '',\n        phoneNumber: '',\n        nationalId: ''\n      })\n    })\n\n    expect(response.status).toBe(400)\n    \n    const data = await response.json()\n    expect(data.success).toBe(false)\n    expect(data.type).toBe('VALIDATION_ERROR')\n    expect(data.fieldErrors).toHaveLength(3)\n    \n    const fieldNames = data.fieldErrors.map((err: any) => err.field)\n    expect(fieldNames).toContain('name')\n    expect(fieldNames).toContain('phoneNumber')\n    expect(fieldNames).toContain('nationalId')\n  })\n\n  it('should create client successfully with valid data', async () => {\n    const clientData = {\n      name: 'John Doe',\n      phoneNumber: '0721234567',\n      nationalId: '1234567890123'\n    }\n\n    const response = await fetch('http://localhost:8080/api/clients', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(clientData)\n    })\n\n    expect(response.status).toBe(201)\n    \n    const data = await response.json()\n    expect(data.success).toBe(true)\n    expect(data.data).toBeDefined()\n    expect(data.data.name).toBe('John Doe')\n    expect(data.data.phoneNumber).toBe('0721234567')\n    expect(data.data.nationalId).toBe('1234567890123')\n  })\n\n  it('should handle partial validation errors', async () => {\n    const response = await fetch('http://localhost:8080/api/clients', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: '', // Invalid\n        phoneNumber: '0721234567', // Valid\n        nationalId: '1234567890123' // Valid\n      })\n    })\n\n    expect(response.status).toBe(400)\n    \n    const data = await response.json()\n    expect(data.success).toBe(false)\n    expect(data.fieldErrors).toHaveLength(1)\n    expect(data.fieldErrors[0].field).toBe('name')\n    expect(data.fieldErrors[0].message).toBe('Name is required')\n  })\n})"],"mappings":"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","ignoreList":[]}